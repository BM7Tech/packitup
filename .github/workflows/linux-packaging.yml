name: Linux Packaging

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build and packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            meson ninja-build \
            fonts-noto \
            build-essential \
            curl gettext libxml2-utils \
            python3 \
            pkg-config \
            cmake \
            libglib2.0-dev libgtk-4-dev libgtkmm-4.0-dev \
            wget unzip \
            libfuse2t64 \
            patchelf \
            libgtk-4-1 libgtkmm-4.0-0 \
            xdg-desktop-portal xdg-desktop-portal-gtk xdg-utils \
          
          # AppImage tooling
          sudo apt-get install -y \
            libglib2.0-bin \
            libgtk-4-bin 

          # Flatpak stuff
          # ...

      - name: Configure and build
        run: |
          meson setup build --prefix=/usr
          meson compile -C build

      - name: Install Source files into DESTDIR
        run: |
          rm -rf AppDir
          mkdir AppDir
          meson install -C build --destdir "$PWD/AppDir"
          glib-compile-schemas   AppDir/usr/share/glib-2.0/schemas
          gtk-update-icon-cache -f -t AppDir/usr/share/icons/hicolor 
          
      - name: Create source tarball
        run: |
          mkdir -p artifacts
          tar czf artifacts/packitup-${{ github.ref_name }}.tar.gz \
            -C AppDir .

      - name: Prepare AppDir
        run: |
          cp src/icons/hicolor/512x512/apps/tech.bm7.packitup.png AppDir/
          cp src/icons/hicolor/scalable/apps/tech.bm7.packitup.svg AppDir/tech.bm7.packitup.svg
          cp build/src/packitup.desktop AppDir/

      - name: Bundle shared libraries (flattened)
        run: |
          # ensure our target exists
          mkdir -p AppDir/usr/lib

          # for each linked .so, copy it (flattened) into AppDir/usr/lib/
          ldd AppDir/usr/bin/packitup \
              | awk '/=> .*\.so/ { print $3 }' \
              | sort -u \
              | while read -r lib; do
                  case "$lib" in
                    # skip glibc, dynamic loader, pthread, rt, math, dl, gcc_s, stdc++
                    /lib/*                              | \
                    /usr/lib*/libc.so.*                | \
                    /usr/lib*/ld-linux*.so.*           | \
                    /usr/lib*/libpthread.so.*          | \
                    /usr/lib*/librt.so.*               | \
                    /usr/lib*/libm.so.*                | \
                    /usr/lib*/libdl.so.*               | \
                    /usr/lib*/libgcc_s.so.*            | \
                    /usr/lib*/libstdc++.so.*)
                      echo "Skipping core runtime $lib"
                      ;;
                    *)
                      echo "Copying $lib â†’ AppDir/usr/lib/"
                      cp "$lib" AppDir/usr/lib/
                      ;;
                  esac
                done

      - name: Fix binary RPATH
        run: |
          # so the loader looks in ../lib (i.e. AppDir/usr/lib) first
          patchelf --set-rpath '$ORIGIN/../lib' AppDir/usr/bin/packitup

      - name: Download AppImageTool
        run: |
          wget -qO appimagetool.AppImage \
            https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool.AppImage

      - name: Build AppImage
        run: |
          mv AppDir PackItUP.AppDir
          cat > PackItUP.AppDir/AppRun << 'EOF'
          #!/bin/env bash
          set -eo pipefail
          
          if [ -z "$APPDIR" ]; then
            SOURCE="${BASH_SOURCE[0]}"
            while [ -h "$SOURCE" ]; do
              DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
              SOURCE="$(readlink "$SOURCE")"
              [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
            done
            DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
            APPDIR="$DIR"
          fi

          export XDG_DATA_DIRS="$APPDIR/usr/share:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
          export GSETTINGS_SCHEMA_DIR="$APPDIR/usr/share/glib-2.0/schemas"

          export LD_LIBRARY_PATH="$APPDIR/usr/lib${LD_LIBRARY_PATH:+":$LD_LIBRARY_PATH"}"
          export TEXTDOMAINDIR="$APPDIR/usr/share/locale"

          exec "$APPDIR/usr/bin/packitup"
          EOF
          chmod +x PackItUP.AppDir/AppRun
          ./appimagetool.AppImage PackItUP.AppDir \
            artifacts/PackItUP-${{ github.ref_name }}.AppImage

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: |
            artifacts/packitup-${{ github.ref_name }}.tar.gz
            artifacts/PackItUP-${{ github.ref_name }}.AppImage
