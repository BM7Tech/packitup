name: Ubuntu AppImage Builder

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build and packaging dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            meson ninja-build \
            fonts-noto \
            build-essential \
            curl gettext libxml2-utils \
            python3 \
            pkg-config \
            cmake \
            libglib2.0-dev libgtk-4-dev libgtkmm-4.0-dev \
            wget unzip \
            libfuse2t64 \
            patchelf \
            libgtk-4-1 libgtkmm-4.0-0 \
            xdg-desktop-portal xdg-desktop-portal-gtk xdg-utils \
          squashfs-tools strace wget zsync libpackagekit-glib2-dev
          
          # AppImage tooling
          sudo apt-get install -y \
            libglib2.0-bin \
            libgtk-4-bin 

          # Flatpak stuff
          # ...

      - name: Setup builder environment
        run: |
          wget -c "https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh"
          wget -c "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-gtk.sh

      - name: Configure & build with Meson
        run: |
          meson setup build --prefix=/usr
          meson compile -C build
          rm -rf AppDir
          mkdir AppDir
          meson install -C build --destdir="$PWD/AppDir"
          cp /usr/share/glib-2.0/schemas/* AppDir/usr/share/glib-2.0/schemas
          glib-compile-schemas  AppDir/usr/share/glib-2.0/schemas
          gtk-update-icon-cache -f -t AppDir/usr/share/icons/hicolor
          cp AppDir/usr/share/applications/packitup.desktop AppDir
          cp AppDir/usr/share/icons/hicolor/256x256/apps/tech.bm7.packitup.png AppDir
      
      - name: Build AppDir folder
        run: |
          NO_STRIP=1 DEPLOY_GTK_VERSION=4 ./linuxdeploy-x86_64.AppImage --appdir AppDir --executable AppDir/usr/bin/packitup --plugin gtk

      - name: Patch AppDir Folder
        run: |
          rm -rf AppDir/apprun-hooks/
          pushd AppDir/usr/lib
          ls *.so* | sort -u > libraries.txt
          popd
          rm -rf AppDir/AppRun
          cp AppDir/usr/lib/libraries.txt .
          cat > AppDir/AppRun << 'EOF'
          #!/usr/bin/env bash
          set -e

          this_dir="$(readlink -f "$(dirname "$0")")"

          # locate bundle
          APPDIR="$(dirname "$(realpath "$0")")"
          # force our libs first
          export LD_LIBRARY_PATH="$APPDIR/usr/lib"
          # if host GTK sneaks in as libgtk-4.so.0, preload the correct one
          #export LD_PRELOAD="$APPDIR/usr/lib/libgtk-4.so.1"
          # basic data dirs so schemas & typelibs work
          export XDG_DATA_DIRS="$APPDIR/usr/share:/usr/share:${XDG_DATA_DIRS:-}"
          export GSETTINGS_SCHEMA_DIR="$APPDIR/usr/share/glib-2.0/schemas"
          export GDK_BACKEND="${GDK_BACKEND:-wayland,x11}"
          export GI_TYPELIB_PATH="$APPDIR/usr/lib/girepository-1.0"
          export GDK_PIXBUF_MODULE_FILE="$APPDIR/usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"
          export TEXTDOMAINDIR="$APPDIR/usr/share/locale"
          # exec your real binary
          exec "$this_dir"/AppRun.wrapped
          EOF
          chmod +x AppDir/AppRun

      - name: Run appimagetool to create AppImage
        run: |
          wget -c https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ./appimagetool-x86_64.AppImage AppDir
        

      - name: Preparing artifacts directory
        run: |
          mkdir -p artifacts

      - name: Rename into friendly AppImage
        run: |
          mv PackItUP*.AppImage artifacts/PackItUP-${{ github.ref_name }}.AppImage

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PackItUP-AppImage
          path: artifacts/PackItUP-${{ github.ref_name }}.AppImage

